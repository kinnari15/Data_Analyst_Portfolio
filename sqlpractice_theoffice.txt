/*Create Table EmployeeDemographics 
(EmployeeID int, 
FirstName varchar(50), 
LastName varchar(50), 
Age int, 
Gender varchar(50)
)*/

/*Create Table EmployeeSalary 
(EmployeeID int, 
JobTitle varchar(50), 
Salary int
)*/
/*Insert into EmployeeDemographics VALUES
(1001, 'Jim', 'Halpert', 30, 'Male'),
(1002, 'Pam', 'Beasley', 30, 'Female'),
(1003, 'Dwight', 'Schrute', 29, 'Male'),
(1004, 'Angela', 'Martin', 31, 'Female'),
(1005, 'Toby', 'Flenderson', 32, 'Male'),
(1006, 'Michael', 'Scott', 35, 'Male'),
(1007, 'Meredith', 'Palmer', 32, 'Female'),
(1008, 'Stanley', 'Hudson', 38, 'Male'),
(1009, 'Kevin', 'Malone', 31, 'Male')*/

/*Insert Into EmployeeSalary VALUES
(1001, 'Salesman', 45000),
(1002, 'Receptionist', 36000),
(1003, 'Salesman', 63000),
(1004, 'Accountant', 47000),
(1005, 'HR', 50000),
(1006, 'Regional Manager', 65000),
(1007, 'Supplier Relations', 41000),
(1008, 'Salesman', 48000),
(1009, 'Accountant', 42000)*/

--INNER JOIN

/*SELECT * FROM EmployeeDemographics
LEFT OUTER JOIN EmployeeSalary
	ON EmployeeDemographics.EmployeeID = EmployeeSalary.EmployeeID*/
   
 /*SELECT  JobTitle, Salary, AVG(SALARY)
 FROM EmployeeDemographics
INNER JOIN EmployeeSalary
 	ON EmployeeDemographics.EmployeeID = EmployeeSalary.EmployeeID
WHERE JobTitle = 'Salesman'
GROUP BY JobTitle*/

/*INSERT INTO EmployeeDemographics VALUES
(1011, 'Ryan','Howard',26,'Male'),
(NULL, 'Holly', 'Flax', NULL, NULL),
(1013, 'Darryl', 'Philbin', NULL, 'Male')*/

/*Create Table WareHouseEmployeeDemographics 
(EmployeeID int, 
FirstName varchar(50), 
LastName varchar(50), 
Age int, 
Gender varchar(50)
)*/

/*Insert into WareHouseEmployeeDemographics VALUES
(1013, 'Darryl', 'Philbin', NULL, 'Male'),
(1050, 'Roy', 'Anderson', 31, 'Male'),
(1051, 'Hidetoshi', 'Hasagawa', 40, 'Male'),
(1052, 'Val', 'Johnson', 31, 'Female')*/

/*SELECT EmployeeID
FROM EmployeeDemographics 
UNION 
SELECT EmployeeID
FROM EmployeeSalary
ORDER BY EmployeeID*/

/*SELECT FirstName, LastName, Age,
CASE
	WHEN Age = 38 THEN 'Stanley'
	WHEN Age > 30 THEN 'Old'
    ELSE 'Baby'
END
FROM EmployeeDemographics
WHERE Age is NOT NULL
ORDER BY Age*/

/*SELECT FirstName, LastName, JobTitle, Salary,
CASE 
	WHEN JobTitle = 'Salesman' THEN Salary + (Salary * .10)
    WHEN JobTitle = 'Accountant' THEN Salary + (Salary * .05)
    WHEN JobTitle = 'HR' THEN Salary + (Salary * .000001)
    ELSE Salary + (Salary * .03)
END AS SalaryAfterRaise
FROM EmployeeDemographics
JOIN EmployeeSalary
	ON EmployeeDemographics.EmployeeID = EmployeeSalary.EmployeeID*/

/*SELECT JobTitle, AVG(Salary)
FROM EmployeeDemographics
JOIN EmployeeSalary
	ON EmployeeDemographics.EmployeeID = EmployeeSalary.EmployeeID
GROUP BY JobTitle
HAVING AVG(Salary) > 45000
ORDER BY AVG(Salary)*/

/*SELECT * 
FROM EmployeeDemographics
UPDATE EmployeeDemographics
SET Age = 31, Gender = 'Female'
WHERE FirstName = 'Holly' AND LastName = 'Flax'*/

/*SELECT *
FROM EmployeeDemographics
WHERE EmployeeID = 1011*/

/*SELECT Demo.EmployeeID, Sal.Salary
FROM EmployeeDemographics AS Demo
JOIN EmployeeSalary AS Sal
	ON Demo.EmployeeID = Sal.EmployeeID*/

/*SELECT FirstName, LastName, Gender, Salary,
COUNT(Gender) 
OVER (PARTITION BY Gender) as TotalGender
FROM EmployeeDemographics Demo
JOIN EmployeeSalary Sal
	ON Demo.EmployeeID = Sal.EmployeeID*/

--SELECT FirstName, LastName, Gender, Salary, COUNT(Gender)
--OVER (PARTITION BY Gender) as TotalGender
--FROM EmployeeDemographics AS Demo
--JOIN EmployeeSalary AS Sal
--	ON Demo.EmployeeID = Sal.EmployeeID
--GROUP BY Gender

--CTE is only created on memory

/*WITH CTE_Employee as 
(SELECT FirstName, LastName, Gender, Salary,
 COUNT(gender) OVER (PARTITION BY Gender) as TotalGender
 , AVG(Salary) OVER (PARTITION BY Gender) as AVGSalary
 FROM EmployeeDemographics emp
 JOIN EmployeeSalary sal
 	ON emp.EmployeeID = sal.EmployeeID
 WHERE Salary > '45000'
 )
 SELECT FirstName, AvgSalary
 FROM CTE_Employee*/
 
 --Temp/Temporary Tables
 
--DROP TABLE IF EXISTS #TempEmployee2
/*CREATE TABLE #tempEmployee (
 EmployeeID int,
 JobTitle varchar(100),
 Salary int
 )
 
 SELECT * 
 FROM #tempEmployee
 
 INSERT INTO #tempEmployee VALUES
 ('1001', 'HR', '45000')
 
 INSERT INTO #tempEmployee
 SELECT *
 FROM EmployeeSalary
 
 CREATE TABLE #tempEmployee2 (
   JobTitle varchar(50),
   EmployeesPerJob int,
   AvgAge int,
   AvgSalart int
   )
   
INSERT INTO #tempEmployee2
SELECT JobTitle, Count(JobTitle), Avg(Age), AVG(salary)
FROM EmployeeDemographics emp
JOIN EmployeeSalary sal
	ON emp.EmployeeID = sal.EmployeeID
group by JobTitle

SELECT *
FROM #tempemployee2*/


/*CREATE TABLE EmployeeErrors (
EmployeeID varchar(50)
,FirstName varchar(50)
,LastName varchar(50)
)*/
  
/*INSERT INTO EmployeeErrors VALUES
('1001  ', 'Jimbo', 'Halbert')
,('  1002', 'Pamela', 'Beasely')
,('1005', 'TOby', 'Flenderson - Fired')*/

--SELECT *
--FROM EmployeeErrors

--USING Trim, LTRIM, RTRIM

--SELECT EmployeeID, TRIM(EmployeeID) AS IDTRIM
--FROM EmployeeErrors

--SELECT EmployeeID, LTRIM(EmployeeID) AS IDTRIM
--FROM EmployeeErrors

--SELECT EmployeeID, RTRIM(EmployeeID) AS IDTRIM
--FROM EmployeeErrors

--Replace use

--SELECT LastName, REPLACE(LastName, '- Fired', '') AS LastNameFixed
--FROM EmployeeErrors

--SELECT SUBSTRING(FirstName,3,3)
--FROM EmployeeErrors

 --Fuzzy matching - intersection basically
/*SELECT err.FirstName, SUBSTRING(err.FirstName,1,3), dem.FirstName, SUBSTRING(dem.FirstName,1,3)
FROM EmployeeErrors err
JOIN EmployeeDemographics dem
	ON SUBSTRING(err.FirstName,1,3) = SUBSTRING(dem.FirstName,1,3)*/
    
--UPPER and LOWER
--SELECT FirstName, LOWER(FirstName)
--FROM EmployeeErrors

--SELECT FirstName, UPPER(FirstName)
--FROM EmployeeErrors

--Stored procedures is a group of SQL statements stored together to reduce network traffic and improve memory management

CREATE PROCEDURE TEST
AS
SELECT *
FROM EmployeeDemographics

EXEC TEST 

CREATE PROCEDURE Temp_Employee

CREATE PROCEDURE Temp_Employee
AS
DROP TABLE IF EXISTS #temp_employee
Create table #temp_employee (
JobTitle varchar(100),
EmployeesPerJob int ,
AvgAge int,
AvgSalary int
)


Insert into #temp_employee
SELECT JobTitle, Count(JobTitle), Avg(Age), AVG(salary)
FROM SQLTutorial..EmployeeDemographics emp
JOIN SQLTutorial..EmployeeSalary sal
	ON emp.EmployeeID = sal.EmployeeID
group by JobTitle

Select * 
From #temp_employee
GO;




CREATE PROCEDURE Temp_Employee2 
@JobTitle nvarchar(100)
AS
DROP TABLE IF EXISTS #temp_employee3
Create table #temp_employee3 (
JobTitle varchar(100),
EmployeesPerJob int ,
AvgAge int,
AvgSalary int
)


Insert into #temp_employee3
SELECT JobTitle, Count(JobTitle), Avg(Age), AVG(salary)
FROM SQLTutorial..EmployeeDemographics emp
JOIN SQLTutorial..EmployeeSalary sal
	ON emp.EmployeeID = sal.EmployeeID
where JobTitle = @JobTitle --- make sure to change this in this script from original above
group by JobTitle

Select * 
From #temp_employee3
GO;


exec Temp_Employee2 @jobtitle = 'Salesman'
exec Temp_Employee2 @jobtitle = 'Accountant'

--Subqueries - query within a query

--SELECT *
--FROM EmployeeSalary

--Subquery in SELECT

--SELECT EmployeeID, Salary, (SELECT AVG(Salary) FROM EmployeeSalary) AS AllAvgSalary
--FROM EmployeeSalary

--Subquery in FROM
--SELECT a.EmployeeID, AllAvgSalary
--FROM (SELECT EmployeeID, Salary, AVG(Salary) OVER () AS AllAvgSalary
 --     FROM EmployeeSalary) a

--Subquery in WHERE

SELECT EmployeeID, JobTitle, Salary
FROM EmployeeSalary
WHERE EmployeeID IN (
  SELECT EmployeeID
  FROM EmployeeDemographics
  WHERE Age > 30)
      